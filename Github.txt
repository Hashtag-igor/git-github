//Commits

Commit: Dar commit é criar uma nova versão do seu software;
________
//Branch

Origin: é a origem, repositorio Local. É um backup que fica na sua máquina;

Master: é a Ramificação Principal. Como se fosse o tronco de uma arvore.

*Evite commitar tudo na Branch Master.
*Quando você tiver alguma atualização para fazer (ex um site), não faça na branch Master, porque caso dê um erro, você está passando ele para o ramo principal do seu projeto.
Porque caso você veja que uma nova branch que foi criada não deu certo, você pode remove-lá do seu projeto, sem afetar a branch Master.
*O ideal para projetos grandes é você criar uma nova branch (por exemplo o designer do seu projeto) e commitar atualizações para essa nova branch.
*Quando você finalizar por completo, ai sim você pode fazer a junção dessa branch criada (designer), com a branch Master.
*Você faz essas junções de branch's novas + a master, com o "merge".

*O ideal é você fazer a estrutura basica/fundamental do seu projeto e coloca-lá na branch Master. O resto você cria novas branch's ramificações da Master.
________
//GitHub Desktop

*Criando Repositorio Local = file > new repository > create a new repository (Aqui você estará criando um repositorio na sua maquina).

*Criando Repositorio na Nuvem = publish repository > Publish repository (Aqui você estará enviando seu repositorio local, para a nuvem, no github).

*Criando Nova Branch = branch > new branch > create a branch (Aqui você vai estar criando uma nova Branch).

*Fazendo o Merge = colocar inicialmente a branch que você vai fazer o merge (aonde eu quero colocar o conteúdo). ex: quero passar o conteúdo da branch styles, para a branch master.. o merge será na branch master.  
branch > merge into current branch.. > merge into master + escolhe qual será a merge que vai ir pro master (fica assim ao terminar de selecionar: Merge "nome da branch que será passada" into "branch que receberá" ou This will merge 2 commits from "nome da branch que será passada" into "nome da branch que receberá o conteúdo da outra branch").

Se ao fazer o Merge de duas branch's conflito entre elas, por ambos as branch's terem alterações diferentes em estruturas iguais do projeto, aparecerá a seguinte mensagem:
    There will be 1 conflicted file when merging "nome da branch que passará o conteúdo para a outra" into "nome da branch que receberá o conteúdo da outra"
Você pode mesmo assim clicar em continuar, porque após fazer isso, o Github Desktop mostrará aonde está o erro das duas branch's, ele mostra de forma clara e facil. A partir disso, você pode alterar o conflito e resolver o erro.
Quando você for na opção de fazer as alterações de conflito, aparecerá 4 opções:
    Aceitar mudança atual (prevalece o conteúdo da master)
    Aceitar a mudança de entrada (o conteúdo de conflito da branch "filho" alterará o da "master")
    Aceitar as duas alterações
    Comparar as mudanças (vai colocar as duas branch's lado a lado para você ver melhor)
Após escolher e aceitar uma das mudanças, o Github Desktop removerá a mensagem de conflito e deixará você continuar a merge.
_________
ReadMe.md: É como se fosse um manual de intruções do seu codigo;
## = É para simbolizar titulos dentro de uma ReadMe;